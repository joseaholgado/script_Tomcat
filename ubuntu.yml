AWSTemplateFormatVersion: '2010-09-09'
Description: Despliegue app Java sobre instancia EC2 con ubuntu 20.04
Parameters:
  EC2AMI:
    Description: Imagen del Sistema Operativo
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id'
    Default: '/aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id'
  KeyName:
    Description: Par clave valor para acceso SSH
    Type: AWS::EC2::KeyPair::KeyName
    Default: vockey
  InstanceType:
    Description: Tamaño instancia EC2
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    ConstraintDescription: Tipos de instancia validas
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT3M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install:
          - install_and_enable_cfn_hup
        install_and_enable_cfn_hup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content:
                Fn::Join:
                - ''
                - - "[main]\n"
                  - stack=
                  - Ref: AWS::StackId
                  - "\n"
                  - region=
                  - Ref: AWS::Region
                  - "\n"
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                Fn::Join:
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n"
                  - "action=/opt/aws/bin/cfn-init -v"
                  - "--stack "
                  - Ref: AWS::StackName
                  - " --resource EC2Instance"
                  - " --configsets full_install"
                  - " --region "
                  - Ref: AWS::Region
                  - "\n"
                  - "runas=root"
            "/lib/systemd/system/cfn-hup.service":
              content:
                Fn::Join:
                  - ''
                  - - "[Unit]\n"
                    - "Description=cfn-hup daemon\n\n"
                    - "[Service]\n"
                    - "Type=simple\n"
                    - "ExecStart=/opt/aws/bin/cfn-hup\n"
                    - "Restart=always\n\n"
                    - "[Install]\n"
                    - "WantedBy=multi-user.target"
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
    Properties:
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
        - Ref: SecurityGroup
      KeyName:
        Ref: KeyName
      IamInstanceProfile: 
        "LabInstanceProfile"
      Monitoring: true
      ImageId:
        Ref: EC2AMI
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > /tmp/userdata.log 2>&1
          # Actualizar todas las apps
          apt update -y
          # Instalar unzip
          apt install unzip
          # Instalación CodeDeploy Agent
          apt install ruby-full -y
          apt install wget -y
          cd /home/ubuntu
          wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto > /tmp/logfile
          service codedeploy-agent start
          # Instalar AWS helper scripts de CloudFormation
          mkdir -p /opt/aws/bin
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz
          ln -s /root/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --configsets full_install --region ${AWS::Region}
          sleep 1

          # -------------------------------------------------Instalar Tomcat--------------------------------------
          #!/bin/bash

          # Este script instala y configura Tomcat 10 en Ubuntu 20.04
          # Se debe ejecutar con permisos de superusuario

          # Salir en caso de error
          set -e

          # Comprobar que se ejecuta como superusuario
          echo "Actualizando sistema..."
          apt update
          apt upgrade -y

          # Instalar Java 17
          echo "Instalando Java 17..."
          apt install -y openjdk-17-jdk
          java -version

          # Descargar Tomcat
          echo "Descargando Tomcat 10..."
          wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.18/bin/apache-tomcat-10.1.18.tar.gz -P /tmp

          # Instalar tar
          apt install tar

          # Descomprimir Tomcat
          echo "Descomprimiendo Tomcat..."
          mkdir -p /opt/tomcat
          tar xf /tmp/apache-tomcat-10*.tar.gz -C /opt/tomcat --strip-components=1

          # Crear grupo tomcat
          echo "Creando grupo tomcat..."
          if ! getent group tomcat > /dev/null 2>&1; then
              groupadd tomcat
          fi

          # Crear usuario tomcat
          echo "Creando usuario tomcat..."
          if ! id -u tomcat > /dev/null 2>&1; then
              useradd -m -s /bin/false -g tomcat -d /opt/tomcat tomcat
          fi



          # Configurar permisos
          echo "Configurando permisos..."
          cd /opt/tomcat
          # Cambiar el propietario y grupo de todos los archivos y subdirectorios a tomcat
          chown -R tomcat:tomcat /opt/tomcat/
          # Permisos de lectura y ejecución para el grupo tomcat
          chmod -R g+r conf
          chmod g+x conf
          chmod -R u+x /opt/tomcat/bin

          echo "Configurando usuarios administrativos..."
          # Buscar "</tomcat-users>" y añadir los usuarios administrativos. (el \ es para escapar el /)
          # El comando sed -i hace los cambios directamente en el archivo y no muestra la salida por pantalla
              sed -i 's/<\/tomcat-users>/  <role rolename="manager-gui" \/>\n  <user username="manager" password="manager_password" roles="manager-gui" \/>\n  <role rolename="admin-gui" \/>\n  <user username="admin" password="admin_password" roles="manager-gui,admin-gui" \/>\n<\/tomcat-users>/' /opt/tomcat/conf/tomcat-users.xml


          echo "Configurando acceso a la página del Manager..."
              sed -i '/<Valve/ s/^/<!-- /' /opt/tomcat/webapps/manager/META-INF/context.xml
              sed -i '/:1|0:0:0:0:0:0:0:1" \/>/ s/$/ -->/' /opt/tomcat/webapps/manager/META-INF/context.xml


          echo "Configurando acceso a la página del Host Manager..."
              sed -i '/<Valve/ s/^/<!-- /' /opt/tomcat/webapps/host-manager/META-INF/context.xml
              sed -i '/:1|0:0:0:0:0:0:0:1" \/>/ s/$/ -->/' /opt/tomcat/webapps/host-manager/META-INF/context.xml

          echo "Creando servicio..."
          # Obtener la ruta de la instalación de Java
          RUTA=$(update-java-alternatives -l | awk '{print $3}')

          cat > /etc/systemd/system/tomcat.service <<EOF
          [Unit]
          Description=Tomcat
          After=network.target

          [Service]
          Type=forking

          User=tomcat
          Group=tomcat

          Environment="JAVA_HOME=$RUTA"
          Environment="JAVA_OPTS=-Djava.security.egd=file:///dev/urandom"
          Environment="CATALINA_BASE=/opt/tomcat"
          Environment="CATALINA_HOME=/opt/tomcat"
          Environment="CATALINA_PID=/opt/tomcat/temp/tomcat.pid"
          Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC"

          ExecStart=/opt/tomcat/bin/startup.sh
          ExecStop=/opt/tomcat/bin/shutdown.sh

          RestartSec=10
          Restart=always

          [Install]
          WantedBy=multi-user.target
          EOF

          # Configuramos el JAVA_HOME
          # Obtener la ruta de instalación de Java 1.17.0
          JAVA_PATH=$(sudo update-java-alternatives -l | grep '1.17.0' | awk '{print $3}')

          # Reemplazar JAVA_HOME en tomcat.service
          sudo sed -i "s|JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64|JAVA_HOME=$JAVA_PATH|g" /etc/systemd/system/tomcat.service

          echo "Iniciando Tomcat..."
          systemctl daemon-reload
          systemctl start tomcat
          systemctl --no-pager status tomcat
          systemctl enable tomcat

          echo "Configurando firewall..."
          ufw allow 8080

          echo "La contraseña para el usuario manager es manager_password por default y para el usuario admin es admin_password por default"

          
          
          #-------------------------------Instalar git--------------------------------------------
          # # Instalar git
          apt install git -y

          # Crear directorio temporal
          mkdir /home/tmp
          cd /home/tmp

          # Clonar repositorio
          git clone https://github.com/joseaholgado/script_Tomcat

          # Compilamos el proyecto
          cd apacheTomcat/app
          chmod +x gradlew
          ./gradlew war

          #  Copiamos el war a la carpeta de tomcat
          mv build/libs/*.war /opt/tomcat/webapps/hola.war

          echo "Instalación completada, acceder a http://server_domain_or_IP:8080"
          echo "Para entrar a tu app, accede a http://server_domain_or_IP:8080/app_name/endpoints"

          #----------------------------ULTIMA INSTRUCCION-----------------------------------------
          # Esta tiene que serla ultima instrucción
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acesso SSH y web en 8080
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp:
          Ref: SSHLocation
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
Outputs:
  PublicIP:
    Description: The Public IP of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: PublicIP
